const t=(t,e)=>{const s=t?15:50;return e>s?1:e/s};class e{constructor(t){this.data=void 0,this.view=void 0,this.position=void 0,this.next=(t,e)=>()=>{const s=t(this.position);return this.position+=e,s},this.skip=t=>this.position+=t,this.nextByte=this.next(t=>this.view.getUint8(t),1),this.nextSignedByte=this.next(t=>this.view.getInt8(t),1),this.nextShort=this.next(t=>this.view.getUint16(t,!0),2),this.nextSignedShort=this.next(t=>this.view.getInt16(t,!0),2),this.nextBigEndianSignedShort=this.next(t=>this.view.getInt16(t,!1),2),this.nextInt=this.next(t=>this.view.getInt32(t,!0),4),this.nextWavetable=()=>{const t=[];for(let e=0;e<256;e++)t.push(this.nextSignedByte());return t},this.asDrumSample=()=>{const t=[];for(;this.position<this.data.length;)t.push(this.nextBigEndianSignedShort());return t},this.data=t,this.view=new DataView(t.buffer),this.position=0}}const s=t=>t>1?1:t<-1?-1:t,n=t=>new e(t).asDrumSample().map(t=>1*t/32767),a=[262,277,294,311,330,349,370,392,415,440,466,494],i=[32,64,64,128,128,128,128,128],o=[256,256,128,128,64,32,16,8],h=[0,43,86,129,172,215,256,297,340,383,426,469,512],l=t=>{const e=Math.floor(Math.min(12,Math.max(0,t))),s=10*(h[e]-256);let n=1,a=1;return s<0?a=Math.pow(10,s/2e3):t>0&&(n=Math.pow(10,-s/2e3)),[n,a]};class r{constructor(t,s){this._sampleRate=void 0,this._wavetable=void 0,this._drums=void 0,this.useAlgorithmicPitch=!0,this.parseChannelData=t=>({voice:t.nextSignedShort(),instrument:t.nextByte(),pi:0!=t.nextByte(),noteCount:t.nextShort(),notes:[],loopNote:0}),this.parse=t=>{const s=new e(t),n=this._drums.map(t=>t.length);s.skip(6);const h=(p=s.nextShort(),m=this._sampleRate,t=>t*(Math.floor(m/1e3)*p)),r=h(1);var p,m;s.skip(2);const f=h(s.nextInt()),c=h(s.nextInt()),u=[];for(let t=0;t<16;t++)u.push(this.parseChannelData(s));for(let t=0;t<16;t++){let e=95,p=1,m=254,c=6;for(let e=0;e<u[t].noteCount;e++){const e=s.nextInt();u[t].notes.push({start:Math.floor(h(e)),end:0,leftVolume:0,rightVolume:0,pan:0,pitch:0,sampleAdvance:0,volume:0,length:0})}for(let n=0;n<u[t].noteCount;n++){let a=s.nextByte();255==a&&(a=e),e=a,u[t].notes[n].pitch=a}for(let e=0;e<u[t].noteCount;e++){let n=s.nextByte();255==n&&(n=p),p=n,u[t].notes[e].end=u[t].notes[e].start+h(n),u[t].notes[e].length=n}for(let e=0;e<u[t].noteCount;e++){let n=s.nextByte();255==n&&(n=m),m=n,u[t].notes[e].volume=n}for(let e=0;e<u[t].noteCount;e++){let n=s.nextByte();255==n&&(n=c),c=n,u[t].notes[e].pan=n}for(let e=0;e<u[t].noteCount;e++){const s=u[t].notes[e],h=s.pitch,p=t>=8,m=u[t].voice/1e3;let f=0;if(this.useAlgorithmicPitch)f=Math.pow(2,(h+m+155.376)/12);else{const e=Math.floor(h%12),s=Math.floor(h/12);f=a[e]*i[s]+(u[t].voice-1e3)}const c=f/this._sampleRate,[d,v]=l(s.pan),g=Math.pow(10,8*(s.volume-255)/2e3);if(s.leftVolume=d*g,s.rightVolume=v*g,s.sampleAdvance=c,p){s.sampleAdvance=(800*s.pitch+100)/this._sampleRate,s.end=Math.floor(s.start+Math.min(n[u[t].instrument]/s.sampleAdvance,r*s.length/s.sampleAdvance));const a=u[t].notes[e+1];a&&(s.end=Math.floor(Math.min(s.end,a.start-1)))}if(u[t].pi){const t=Math.floor(h/12);s.end=s.start+4*(t+1)*o[t]}}u[t].notes.sort((t,e)=>t.start-e.start);for(let e=0;e<u[t].noteCount;e++){const e=u[t].notes.findIndex(t=>t.end>f);u[t].loopNote=-1!=e?e:0}}return{startSamples:f,endSamples:c,channels:u,sampleRate:this._sampleRate,drums:this._drums,wavetable:this._wavetable}},this._sampleRate=t,this._wavetable=(t=>{const s=[],n=new e(t);for(let t=0;t<100;t++){const t=n.nextWavetable();s.push(t.map(t=>1*t/256))}return s})(s.WAVE100),this._drums=s.DRUMS.map(n)}}class p{constructor(e,n,a){this.waveData=void 0,this.sampleRate=void 0,this.song=void 0,this.stepBuffer=[0,0],this.channelBuffer=[0,0],this.sample=void 0,this.state=void 0,this.run=(t,e,s)=>{const n=[new Float32Array(t),new Float32Array(t)];for(let n=0;n<t;n++)this.step(this.stepBuffer),e[n]=this.stepBuffer[0],s[n]=this.stepBuffer[1];return n},this.step=t=>{let e=0,n=0;for(let t=0;t<16;t++)this.stepChannel(t,this.channelBuffer),e+=.3333333333333333*this.channelBuffer[0],n+=.3333333333333333*this.channelBuffer[1];if(this.sample++,this.sample>=this.song.endSamples){for(let t=0;t<16;t++)this.state[t]={noteIndex:this.song.channels[t].loopNote,wavetableOffset:0,samplesPlayed:0};this.sample=this.song.startSamples}const a=(i=this.sample)>1e3?1:i/1e3;var i;t[0]=s(e)*a,t[1]=s(n)*a},this.stepChannel=(e,s)=>{const n=this.song.channels[e],a=this.state[e].noteIndex,i=e>=8,o=a>=n.notes.length?null:n.notes[a];let h=0,l=0;if(null!=o&&this.sample>o.start){const{pi:s}=n,a=n.instrument;if(!s||this.state[e].samplesPlayed<1024){const s=this.state[e].wavetableOffset+o.sampleAdvance,n=this.getSample(i?this.song.drums[a]:this.song.wavetable[a],s);h=n*o.leftVolume,l=n*o.rightVolume,this.state[e].wavetableOffset=s,this.state[e].samplesPlayed++;const r=t(i,this.state[e].samplesPlayed)*((e,s,n)=>t(e,n-s))(i,this.state[e].samplesPlayed,o.end-o.start);h*=r,l*=r}}null!=o&&this.sample>=o.end&&(this.state[e].wavetableOffset=0,this.state[e].samplesPlayed=0,this.state[e].noteIndex++),s[0]=h,s[1]=l},this.getSample=(t,e)=>{const s=t[Math.floor(e)%t.length],n=t[Math.ceil(e)%t.length];return s+(e-Math.floor(e))*(n-s)},this.waveData=n,this.sampleRate=a;const i=new r(a,n);this.song=i.parse(e),this.sample=-4e3,this.state=[];for(let t=0;t<16;t++)this.state.push({noteIndex:0,wavetableOffset:0,samplesPlayed:0})}}export{p as OrganyaPlayer};
//# sourceMappingURL=org-player.modern.js.map
